"""
Integraci√≥n Pr√°ctica: Optimizaci√≥n SLM para Sistemas de Integridad Comercial
Ejemplo real de implementaci√≥n del paper NVIDIA para an√°lisis de integridad empresarial.

Este ejemplo demuestra c√≥mo aplicar la optimizaci√≥n SLM vs LLM espec√≠ficamente
para sistemas de compliance, anti-fraude, y control de integridad comercial.
"""

from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum
import sys
import os

# Importar optimizador SLM y convertidor
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from domains.slm_agentic_optimizer import (
    SLMAgenticOptimizer, AgenticTask, TaskComplexity, AgenticMode,
    OptimizationResult
)
from domains.llm_to_slm_converter import LLMToSLMConverter

class IntegrityRiskLevel(Enum):
    """Niveles de riesgo de integridad comercial"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class ComplianceArea(Enum):
    """√Åreas de compliance empresarial"""
    ANTI_MONEY_LAUNDERING = "aml"
    FRAUD_DETECTION = "fraud"
    SUPPLIER_VERIFICATION = "supplier"
    FINANCIAL_REPORTING = "financial"
    REGULATORY_COMPLIANCE = "regulatory"
    ETHICS_VIOLATIONS = "ethics"
    DATA_PRIVACY = "privacy"
    TRADE_SANCTIONS = "sanctions"

@dataclass
class IntegrityTask:
    """Tarea espec√≠fica de integridad comercial"""
    compliance_area: ComplianceArea
    risk_level: IntegrityRiskLevel
    data_sensitivity: str  # "public", "internal", "confidential", "restricted"
    regulatory_scope: str  # "local", "national", "international"
    automation_potential: float  # 0-1
    false_positive_tolerance: float  # 0-1
    regulatory_penalties: str  # "low", "medium", "high", "severe"

def create_commercial_integrity_tasks() -> List[AgenticTask]:
    """Crea tareas representativas de integridad comercial"""
    
    tasks = []
    
    # Tarea 1: Screening autom√°tico de transacciones
    tasks.append(AgenticTask(
        task_id="transaction_screening_aml",
        description="Screening autom√°tico de transacciones para detecci√≥n de lavado de dinero y actividades sospechosas",
        complexity=TaskComplexity.MODERATE,
        agentic_mode=AgenticMode.CODE_AGENCY,
        frequency=200.0,  # 200 transacciones por hora
        latency_requirement=2.0,  # 2 segundos m√°ximo
        accuracy_requirement=0.95,  # Alta precisi√≥n para evitar falsos positivos
        cost_sensitivity=0.9,  # Muy sensible al costo (alto volumen)
        formatting_strictness=True,  # Reportes regulatorios estructurados
        interaction_type="pattern_detection_classification",
        context_window_needed=2000,  # Datos de transacci√≥n
        specialized_domain="anti_money_laundering",
        historical_performance={
            "detection_rate": 0.92,
            "false_positive_rate": 0.08,
            "processing_speed": 1.5
        }
    ))
    
    # Tarea 2: An√°lisis de integridad de proveedores
    tasks.append(AgenticTask(
        task_id="supplier_integrity_verification",
        description="Verificar integridad y compliance de proveedores mediante an√°lisis de documentos y bases de datos",
        complexity=TaskComplexity.COMPLEX,
        agentic_mode=AgenticMode.LANGUAGE_MODEL_AGENCY,
        frequency=5.0,  # 5 verificaciones por hora
        latency_requirement=60.0,  # 1 hora m√°ximo
        accuracy_requirement=0.98,  # Precisi√≥n cr√≠tica
        cost_sensitivity=0.4,  # Menos sensible (alto impacto)
        formatting_strictness=False,  # An√°lisis cualitativo
        interaction_type="document_analysis_research_synthesis",
        context_window_needed=16000,  # Documentos extensos de proveedores
        specialized_domain="supplier_compliance",
        historical_performance={
            "risk_identification": 0.89,
            "compliance_accuracy": 0.94,
            "thoroughness_score": 0.91
        }
    ))
    
    # Tarea 3: Detecci√≥n de fraude en facturas
    tasks.append(AgenticTask(
        task_id="invoice_fraud_detection",
        description="Detectar patrones de fraude en facturas y documentos financieros",
        complexity=TaskComplexity.SIMPLE,
        agentic_mode=AgenticMode.CODE_AGENCY,
        frequency=150.0,  # 150 facturas por hora
        latency_requirement=5.0,  # 5 segundos
        accuracy_requirement=0.93,
        cost_sensitivity=0.85,
        formatting_strictness=True,  # Alertas estructuradas
        interaction_type="anomaly_detection_pattern_matching",
        context_window_needed=1500,  # Datos de factura
        specialized_domain="fraud_detection"
    ))
    
    # Tarea 4: An√°lisis de compliance regulatorio
    tasks.append(AgenticTask(
        task_id="regulatory_compliance_analysis",
        description="Analizar compliance con regulaciones espec√≠ficas y identificar brechas",
        complexity=TaskComplexity.COMPLEX,
        agentic_mode=AgenticMode.LANGUAGE_MODEL_AGENCY,
        frequency=3.0,  # 3 an√°lisis por hora
        latency_requirement=90.0,  # 1.5 horas
        accuracy_requirement=0.96,
        cost_sensitivity=0.3,
        formatting_strictness=True,  # Reportes regulatorios
        interaction_type="regulatory_analysis_gap_identification",
        context_window_needed=20000,  # Documentos normativos extensos
        specialized_domain="regulatory_compliance"
    ))
    
    # Tarea 5: Monitoreo de conflictos de inter√©s
    tasks.append(AgenticTask(
        task_id="conflict_of_interest_monitoring",
        description="Monitorear y detectar potenciales conflictos de inter√©s entre empleados y terceros",
        complexity=TaskComplexity.CONVERSATIONAL,
        agentic_mode=AgenticMode.LANGUAGE_MODEL_AGENCY,
        frequency=10.0,  # 10 casos por hora
        latency_requirement=20.0,  # 20 minutos
        accuracy_requirement=0.88,
        cost_sensitivity=0.6,
        formatting_strictness=False,
        interaction_type="relationship_analysis_pattern_detection",
        context_window_needed=8000,
        specialized_domain="ethics_compliance"
    ))
    
    # Tarea 6: Verificaci√≥n de sanciones comerciales
    tasks.append(AgenticTask(
        task_id="trade_sanctions_verification",
        description="Verificar cumplimiento con sanciones comerciales y listas de control de exportaciones",
        complexity=TaskComplexity.SIMPLE,
        agentic_mode=AgenticMode.CODE_AGENCY,
        frequency=80.0,  # 80 verificaciones por hora
        latency_requirement=3.0,  # 3 segundos
        accuracy_requirement=0.99,  # Precisi√≥n extrema requerida
        cost_sensitivity=0.7,
        formatting_strictness=True,
        interaction_type="database_matching_verification",
        context_window_needed=1000,
        specialized_domain="trade_compliance"
    ))
    
    return tasks

def demonstrate_commercial_integrity_optimization():
    """Demuestra optimizaci√≥n SLM para integridad comercial"""
    
    print("üõ°Ô∏è  OPTIMIZACI√ìN SLM PARA INTEGRIDAD COMERCIAL")
    print("=" * 80)
    print("Aplicando NVIDIA Research para sistemas de compliance empresarial")
    print("=" * 80)
    
    # Crear optimizador especializado
    optimizer = SLMAgenticOptimizer()
    
    # Obtener tareas de integridad
    integrity_tasks = create_commercial_integrity_tasks()
    
    # An√°lisis de cada tarea de integridad
    optimization_results = []
    
    for task in integrity_tasks:
        print(f"\nüîç AN√ÅLISIS: {task.task_id}")
        print(f"   ‚Ä¢ Descripci√≥n: {task.description}")
        print(f"   ‚Ä¢ √Årea Compliance: {task.specialized_domain}")
        print(f"   ‚Ä¢ Complejidad: {task.complexity.value}")
        print(f"   ‚Ä¢ Volumen: {task.frequency} casos/hora")
        print(f"   ‚Ä¢ Req. Precisi√≥n: {task.accuracy_requirement:.1%}")
        print(f"   ‚Ä¢ Latencia M√°x: {task.latency_requirement}s")
        
        # Realizar optimizaci√≥n
        result = optimizer.analyze(task)
        optimization_results.append((task, result))
        
        print(f"\nüéØ RECOMENDACI√ìN SLM:")
        print(f"   ‚Ä¢ Confianza: {result.confidence:.3f}")
        
        if not result.abstained and result.result:
            opt_result = result.result
            print(f"   ‚Ä¢ Modelo Recomendado: {opt_result.recommended_model}")
            print(f"   ‚Ä¢ Categor√≠a: {opt_result.model_size_category.value.upper()}")
            print(f"   ‚Ä¢ Ahorro Costo: {opt_result.cost_savings:.1%}")
            print(f"   ‚Ä¢ Impacto Performance: {opt_result.performance_impact:+.2f}")
            
            # An√°lisis espec√≠fico para integridad comercial
            integrity_insights = analyze_integrity_implications(task, opt_result)
            print(f"\nüõ°Ô∏è  IMPLICACIONES DE INTEGRIDAD:")
            for insight in integrity_insights:
                print(f"   ‚Ä¢ {insight}")
                
            # An√°lisis de riesgo regulatorio
            regulatory_risks = assess_regulatory_risks(task, opt_result)
            if regulatory_risks:
                print(f"\n‚ö†Ô∏è  RIESGOS REGULATORIOS:")
                for risk in regulatory_risks:
                    print(f"   ‚Ä¢ {risk}")
        
        elif result.abstained:
            print(f"   ‚Ä¢ ‚ö†Ô∏è  Abstenci√≥n: Requiere an√°lisis manual por compliance")
            abstention_reasons = result.metadata.abstention_reasons if result.metadata.abstention_reasons else ["Baja confianza en automatizaci√≥n"]
            print(f"   ‚Ä¢ Raz√≥n: {abstention_reasons[0]}")
    
    # Resumen ejecutivo para directores de integridad
    print(f"\n" + "="*80)
    print(f"üìä RESUMEN EJECUTIVO - OPTIMIZACI√ìN SLM PARA COMPLIANCE")
    print(f"="*80)
    
    generate_integrity_executive_summary(optimization_results)
    
    # Plan de implementaci√≥n para compliance
    print(f"\nüöÄ PLAN DE IMPLEMENTACI√ìN PARA COMPLIANCE:")
    generate_integrity_implementation_plan(optimization_results)
    
    # Demostraci√≥n de conversi√≥n LLM‚ÜíSLM para un caso espec√≠fico
    demonstrate_integrity_llm_to_slm_conversion()
    
    return optimization_results

def analyze_integrity_implications(task: AgenticTask, result: OptimizationResult) -> List[str]:
    """Analiza implicaciones espec√≠ficas para integridad comercial"""
    
    implications = []
    
    # An√°lisis de precisi√≥n para compliance
    if result.model_size_category.value == "slm":
        if task.accuracy_requirement > 0.95:
            implications.append("Precisi√≥n alta mantenida para compliance cr√≠tico")
        
        if task.specialized_domain in ["anti_money_laundering", "trade_compliance"]:
            implications.append("Validaci√≥n adicional requerida para compliance regulatorio")
        
        if result.cost_savings > 0.8:
            implications.append(f"Ahorro permite inversi√≥n en controles adicionales")
    
    # An√°lisis de volumen y escalabilidad
    if task.frequency > 50:
        implications.append("Automatizaci√≥n masiva reduce carga operacional")
    
    # An√°lisis de latencia para procesos cr√≠ticos
    if task.latency_requirement <= 5.0:
        implications.append("Cumple requisitos de procesamiento en tiempo real")
    
    # An√°lisis de trazabilidad
    if task.formatting_strictness:
        implications.append("Mantiene trazabilidad para auditor√≠as regulatorias")
    
    return implications

def assess_regulatory_risks(task: AgenticTask, result: OptimizationResult) -> List[str]:
    """Eval√∫a riesgos regulatorios de la implementaci√≥n SLM"""
    
    risks = []
    
    # Riesgos por √°rea de compliance
    high_risk_areas = ["anti_money_laundering", "trade_compliance", "regulatory_compliance"]
    if task.specialized_domain in high_risk_areas:
        if result.model_size_category.value == "slm":
            risks.append("√Årea de alto riesgo regulatorio - requiere supervisi√≥n adicional")
    
    # Riesgos por precisi√≥n
    if task.accuracy_requirement > 0.95 and result.performance_impact < 0:
        risks.append("Reducci√≥n de precisi√≥n puede impactar compliance")
    
    # Riesgos por volumen
    if task.frequency > 100:
        risks.append("Alto volumen requiere monitoreo continuo de performance")
    
    # Riesgos de explicabilidad
    if task.complexity in [TaskComplexity.COMPLEX, TaskComplexity.CONVERSATIONAL]:
        risks.append("Casos complejos pueden requerir explicabilidad para reguladores")
    
    return risks

def generate_integrity_executive_summary(results: List[tuple]):
    """Genera resumen ejecutivo para directores de integridad"""
    
    total_tasks = len(results)
    slm_recommendations = sum(1 for _, result in results 
                             if not result.abstained and result.result and 
                             result.result.model_size_category.value == "slm")
    
    total_cost_savings = 0
    high_precision_tasks = 0
    real_time_tasks = 0
    
    for task, result in results:
        if task.accuracy_requirement > 0.95:
            high_precision_tasks += 1
        if task.latency_requirement <= 5.0:
            real_time_tasks += 1
        if not result.abstained and result.result:
            total_cost_savings += result.result.cost_savings
    
    avg_cost_savings = total_cost_savings / len([r for _, r in results if not r.abstained]) if results else 0
    
    print(f"   ‚Ä¢ Procesos Analizados: {total_tasks}")
    print(f"   ‚Ä¢ Candidatos para SLM: {slm_recommendations} ({slm_recommendations/total_tasks:.1%})")
    print(f"   ‚Ä¢ Ahorro Operacional Promedio: {avg_cost_savings:.1%}")
    print(f"   ‚Ä¢ Procesos Alta Precisi√≥n: {high_precision_tasks} ({high_precision_tasks/total_tasks:.1%})")
    print(f"   ‚Ä¢ Procesos Tiempo Real: {real_time_tasks} ({real_time_tasks/total_tasks:.1%})")
    
    # An√°lisis por √°rea de compliance
    compliance_analysis = {}
    for task, result in results:
        area = task.specialized_domain or "general"
        if area not in compliance_analysis:
            compliance_analysis[area] = {
                "tasks": 0, 
                "slm_suitable": 0, 
                "high_volume": 0,
                "avg_savings": []
            }
        
        compliance_analysis[area]["tasks"] += 1
        if task.frequency > 50:
            compliance_analysis[area]["high_volume"] += 1
        if not result.abstained and result.result and result.result.model_size_category.value == "slm":
            compliance_analysis[area]["slm_suitable"] += 1
            compliance_analysis[area]["avg_savings"].append(result.result.cost_savings)
    
    print(f"\nüõ°Ô∏è  AN√ÅLISIS POR √ÅREA DE COMPLIANCE:")
    for area, stats in compliance_analysis.items():
        suitability = stats["slm_suitable"] / stats["tasks"] if stats["tasks"] > 0 else 0
        volume_ratio = stats["high_volume"] / stats["tasks"] if stats["tasks"] > 0 else 0
        avg_savings = sum(stats["avg_savings"]) / len(stats["avg_savings"]) if stats["avg_savings"] else 0
        print(f"   ‚Ä¢ {area.replace('_', ' ').title()}: {suitability:.1%} SLM, {volume_ratio:.1%} alto volumen, {avg_savings:.1%} ahorro")

def generate_integrity_implementation_plan(results: List[tuple]):
    """Genera plan de implementaci√≥n para integridad comercial"""
    
    # Clasificar tareas por riesgo y volumen
    low_risk_high_volume = []
    medium_risk_tasks = []
    high_risk_tasks = []
    
    for task, result in results:
        if (not result.abstained and result.result and 
            result.result.model_size_category.value == "slm"):
            
            # Determinar nivel de riesgo basado en √°rea de compliance
            risk_level = "low"
            if task.specialized_domain in ["anti_money_laundering", "regulatory_compliance"]:
                risk_level = "high"
            elif task.specialized_domain in ["supplier_compliance", "fraud_detection"]:
                risk_level = "medium"
            
            if risk_level == "low" and task.frequency > 50:
                low_risk_high_volume.append(task.task_id)
            elif risk_level == "medium":
                medium_risk_tasks.append(task.task_id)
            elif risk_level == "high":
                high_risk_tasks.append(task.task_id)
    
    # Fase 1: Automatizaci√≥n de bajo riesgo
    if low_risk_high_volume:
        print(f"\n   üìÖ FASE 1 (0-2 meses) - Automatizaci√≥n de Bajo Riesgo:")
        for task_id in low_risk_high_volume:
            print(f"      ‚Ä¢ {task_id.replace('_', ' ').title()}")
        print(f"      ‚Ä¢ Impacto: Reducci√≥n inmediata de carga operacional")
        print(f"      ‚Ä¢ Riesgo: M√≠nimo | Supervisi√≥n: Semanal")
    
    # Fase 2: Expansi√≥n controlada
    if medium_risk_tasks:
        print(f"\n   üìÖ FASE 2 (2-6 meses) - Expansi√≥n Controlada:")
        for task_id in medium_risk_tasks:
            print(f"      ‚Ä¢ {task_id.replace('_', ' ').title()}")
        print(f"      ‚Ä¢ Estrategia: Implementaci√≥n gradual con validaci√≥n")
        print(f"      ‚Ä¢ Supervisi√≥n: Diaria con escalaci√≥n autom√°tica")
    
    # Fase 3: Casos de alto riesgo regulatorio
    if high_risk_tasks:
        print(f"\n   üìÖ FASE 3 (6-12 meses) - Alto Riesgo Regulatorio:")
        for task_id in high_risk_tasks:
            print(f"      ‚Ä¢ {task_id.replace('_', ' ').title()}")
        print(f"      ‚Ä¢ Estrategia: Modelo h√≠brido SLM+supervisi√≥n humana")
        print(f"      ‚Ä¢ Validaci√≥n: Doble verificaci√≥n obligatoria")
    
    # Controles y monitoreo
    print(f"\n   üîí CONTROLES DE INTEGRIDAD REQUERIDOS:")
    print(f"      ‚Ä¢ Dashboard de monitoreo en tiempo real")
    print(f"      ‚Ä¢ Alertas autom√°ticas por degradaci√≥n de performance")
    print(f"      ‚Ä¢ Auditor√≠a mensual de decisiones automatizadas")
    print(f"      ‚Ä¢ Backup LLM para casos de alta complejidad")
    print(f"      ‚Ä¢ Trazabilidad completa para investigaciones regulatorias")
    print(f"      ‚Ä¢ Testing continuo contra casos conocidos")

def demonstrate_integrity_llm_to_slm_conversion():
    """Demuestra conversi√≥n LLM‚ÜíSLM para caso de integridad espec√≠fico"""
    
    print(f"\n" + "="*80)
    print(f"üîÑ DEMOSTRACI√ìN: CONVERSI√ìN LLM‚ÜíSLM PARA SCREENING AML")
    print(f"="*80)
    
    # Crear convertidor
    converter = LLMToSLMConverter()
    
    # Datos simulados de agente AML existente
    aml_agent_calls = [
        {
            "call_id": f"aml_{i:04d}",
            "input_prompt": f"Analyze transaction: Amount ${1000+i*50}, From: Account_{i%100}, To: Account_{(i*3)%150}, Country: {'US' if i%3==0 else 'MX' if i%3==1 else 'CA'}",
            "output_response": f"Risk Score: {'LOW' if i%4!=0 else 'MEDIUM' if i%8!=0 else 'HIGH'} - {'Approved' if i%4!=0 else 'Review Required'}",
            "tool_calls": [{"tool": "sanctions_check", "result": "clear"}, {"tool": "pattern_analyzer", "score": 0.1 + (i%10)*0.05}],
            "success": True,
            "latency_ms": 1500 + (i%5)*200,
            "user_id": f"compliance_officer_{i//50}"
        }
        for i in range(300)
    ]
    
    conversion_input = {
        "agent_id": "aml_screening_agent_v2",
        "agent_calls": aml_agent_calls,
        "collection_period_days": 45,
        "conversion_goal": "Reduce latency while maintaining AML compliance",
        "performance_requirements": {
            "min_accuracy": 0.95,
            "max_latency_ms": 1000,
            "cost_reduction_target": 0.8
        }
    }
    
    print(f"üìä AGENTE AML ORIGINAL:")
    print(f"   ‚Ä¢ Transacciones Procesadas: {len(aml_agent_calls)}")
    print(f"   ‚Ä¢ Per√≠odo: {conversion_input['collection_period_days']} d√≠as")
    print(f"   ‚Ä¢ Target Precisi√≥n: {conversion_input['performance_requirements']['min_accuracy']:.0%}")
    print(f"   ‚Ä¢ Target Latencia: {conversion_input['performance_requirements']['max_latency_ms']}ms")
    
    # Ejecutar conversi√≥n (simulada para demo)
    result = converter.analyze(conversion_input)
    
    print(f"\nüéØ RESULTADO DE CONVERSI√ìN AML:")
    print(f"   ‚Ä¢ Confianza: {result.confidence:.3f}")
    print(f"   ‚Ä¢ Abstenci√≥n: {'S√≠' if result.abstained else 'No'}")
    
    if not result.abstained and result.result:
        conv_result = result.result
        print(f"\nüìã CONVERSI√ìN COMPLETADA:")
        print(f"   ‚Ä¢ Etapas Ejecutadas: {len(conv_result.conversion_stages_completed)}/6")
        print(f"   ‚Ä¢ Clusters Identificados: {len(conv_result.identified_clusters)}")
        print(f"   ‚Ä¢ Modelos SLM Seleccionados: {len(conv_result.selected_slms)}")
        
        # An√°lisis espec√≠fico para AML
        print(f"\nüõ°Ô∏è  IMPACTO EN COMPLIANCE AML:")
        cost_analysis = conv_result.cost_analysis
        if cost_analysis:
            baseline = cost_analysis.get("baseline_llm_costs", {}).get("total_monthly", 0)
            projected = cost_analysis.get("projected_slm_costs", {}).get("total_monthly", 0)
            savings = cost_analysis.get("savings_analysis", {}).get("percentage_savings", 0)
            print(f"   ‚Ä¢ Reducci√≥n de Costos: {savings:.1%}")
            print(f"   ‚Ä¢ Ahorro Mensual: ${baseline - projected:,.2f}")
        
        performance = conv_result.performance_comparison
        if performance:
            latency_improvement = performance.get("improvement_metrics", {}).get("latency_improvement", 0)
            print(f"   ‚Ä¢ Mejora de Latencia: {latency_improvement:.1%}")
            print(f"   ‚Ä¢ Retenci√≥n Performance: {performance.get('improvement_metrics', {}).get('performance_retention', 0):.1%}")

if __name__ == "__main__":
    # Ejecutar demostraci√≥n de integridad comercial
    results = demonstrate_commercial_integrity_optimization()
    
    print(f"\n" + "="*80)
    print(f"‚úÖ SISTEMA DE INTEGRIDAD COMERCIAL OPTIMIZADO")
    print(f"="*80)
    print(f"La optimizaci√≥n SLM est√° implementada para sistemas de compliance")
    print(f"empresarial con controles espec√≠ficos de integridad comercial.")
    print(f"")
    print(f"Capacidades implementadas:")
    print(f"‚Ä¢ Automatizaci√≥n de screening de transacciones AML")
    print(f"‚Ä¢ Verificaci√≥n automatizada de proveedores y terceros")
    print(f"‚Ä¢ Detecci√≥n de patrones de fraude en documentos")
    print(f"‚Ä¢ Monitoreo de compliance regulatorio continuo")
    print(f"‚Ä¢ Escalaci√≥n autom√°tica para casos de alto riesgo")
    print(f"‚Ä¢ Trazabilidad completa para auditor√≠as regulatorias")